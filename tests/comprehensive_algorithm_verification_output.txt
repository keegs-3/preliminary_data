====================================================================================================
WELLPATH COMPREHENSIVE ALGORITHM VERIFICATION TEST
Generated: 2025-09-12 00:31:33
Total Configurations Tested: 85
Auto-updates when new REC configs are added to /src/generated_configs/
====================================================================================================

ALGORITHM DISTRIBUTION:

  binary_threshold: 13 configurations
  categorical_filter_threshold: 3 configurations
  composite_weighted: 9 configurations
  constrained_weekly_allowance: 2 configurations
  minimum_frequency: 14 configurations
  proportional: 30 configurations
  proportional_frequency_hybrid: 4 configurations
  weekly_elimination: 8 configurations
  zone_based: 2 configurations

====================================================================================================
INDIVIDUAL CONFIGURATION TESTS
====================================================================================================

ðŸ“Š TEST  1: REC0001.1 - REC0001.1-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0001.1-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      1.0 serving
  Day 2:      1.0 serving
  Day 3:      0.0 serving
  Day 4:      1.0 serving
  Day 5:      1.0 serving
  Day 6:      1.0 serving
  Day 7:      1.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 1.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  2: REC0001.2 - REC0001.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0001.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 5.0 sources target

TEST DATA (7 days):
  Day 1:      3.0 sources
  Day 2:      6.0 sources
  Day 3:      4.0 sources
  Day 4:      5.0 sources
  Day 5:      2.0 sources
  Day 6:      4.5 sources
  Day 7:      5.5 sources

ALGORITHM DETAILS:
  Method: proportional
  Target: 5
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  3: REC0001.3 (i) - REC0001.3 (i)-PROPORTIONAL.json
Algorithm: proportional
File: REC0001.3 (i)-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 25.0 gram target

TEST DATA (7 days):
  Day 1:     15.0 gram
  Day 2:     30.0 gram
  Day 3:     20.0 gram
  Day 4:     25.0 gram
  Day 5:     10.0 gram
  Day 6:     22.5 gram
  Day 7:     27.5 gram

ALGORITHM DETAILS:
  Method: proportional
  Target: 25.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  4: REC0001.3 (ii) - REC0001.3 (ii)-PROPORTIONAL.json
Algorithm: proportional
File: REC0001.3 (ii)-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 38.0 gram target

TEST DATA (7 days):
  Day 1:     22.8 gram
  Day 2:     45.6 gram
  Day 3:     30.4 gram
  Day 4:     38.0 gram
  Day 5:     15.2 gram
  Day 6:     34.2 gram
  Day 7:     41.8 gram

ALGORITHM DETAILS:
  Method: proportional
  Target: 38.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  5: REC0001.3 (iii) - REC0001.3 (iii)-PROPORTIONAL.json
Algorithm: proportional
File: REC0001.3 (iii)-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 21.0 gram target

TEST DATA (7 days):
  Day 1:     12.6 gram
  Day 2:     25.2 gram
  Day 3:     16.8 gram
  Day 4:     21.0 gram
  Day 5:      8.4 gram
  Day 6:     18.9 gram
  Day 7:     23.1 gram

ALGORITHM DETAILS:
  Method: proportional
  Target: 21.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  6: REC0001.3 (iv) - REC0001.3 (iv)-PROPORTIONAL.json
Algorithm: proportional
File: REC0001.3 (iv)-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 30.0 gram target

TEST DATA (7 days):
  Day 1:     18.0 gram
  Day 2:     36.0 gram
  Day 3:     24.0 gram
  Day 4:     30.0 gram
  Day 5:     12.0 gram
  Day 6:     27.0 gram
  Day 7:     33.0 gram

ALGORITHM DETAILS:
  Method: proportional
  Target: 30.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  7: REC0002.1 - REC0002.1-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0002.1-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:    100.0 boolean
  Day 2:    100.0 boolean
  Day 3:      0.0 boolean
  Day 4:    100.0 boolean
  Day 5:    100.0 boolean
  Day 6:    100.0 boolean
  Day 7:    100.0 boolean

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 100
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  8: REC0002.2 - REC0002.2-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0002.2-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:    100.0 boolean
  Day 2:    100.0 boolean
  Day 3:      0.0 boolean
  Day 4:    100.0 boolean
  Day 5:    100.0 boolean
  Day 6:    100.0 boolean
  Day 7:    100.0 boolean

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 100
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST  9: REC0002.3 - REC0002.3-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0002.3-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:    100.0 boolean
  Day 2:    100.0 boolean
  Day 3:      0.0 boolean
  Day 4:    100.0 boolean
  Day 5:    100.0 boolean
  Day 6:    100.0 boolean
  Day 7:    100.0 boolean

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 100
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 10: REC0003.1 - REC0003.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0003.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 90.0 minute target

TEST DATA (7 days):
  Day 1:     54.0 minute
  Day 2:    108.0 minute
  Day 3:     72.0 minute
  Day 4:     90.0 minute
  Day 5:     36.0 minute
  Day 6:     81.0 minute
  Day 7:     99.0 minute

ALGORITHM DETAILS:
  Method: proportional
  Target: 90.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 11: REC0003.2 - REC0003.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0003.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 120.0 minute target

TEST DATA (7 days):
  Day 1:     72.0 minute
  Day 2:    144.0 minute
  Day 3:     96.0 minute
  Day 4:    120.0 minute
  Day 5:     48.0 minute
  Day 6:    108.0 minute
  Day 7:    132.0 minute

ALGORITHM DETAILS:
  Method: proportional
  Target: 120.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 12: REC0003.3 - REC0003.3-PROPORTIONAL.json
Algorithm: proportional
File: REC0003.3-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 180.0 minute target

TEST DATA (7 days):
  Day 1:    108.0 minute
  Day 2:    216.0 minute
  Day 3:    144.0 minute
  Day 4:    180.0 minute
  Day 5:     72.0 minute
  Day 6:    162.0 minute
  Day 7:    198.0 minute

ALGORITHM DETAILS:
  Method: proportional
  Target: 180.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 13: REC0004.1 - REC0004.1-ZONE-BASED-5TIER.json
Algorithm: zone_based
File: REC0004.1-ZONE-BASED-5TIER.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed zone performance around 1.0 hours_minutes

TEST DATA (7 days):
  Day 1:      0.9 hours_minutes
  Day 2:      1.1 hours_minutes
  Day 3:      0.7 hours_minutes
  Day 4:      1.0 hours_minutes
  Day 5:      1.2 hours_minutes
  Day 6:      0.6 hours_minutes
  Day 7:      1.0 hours_minutes

ALGORITHM DETAILS:
  Method: zone_based

SIGNIFICANCE: Tests zone_based algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 14: REC0004.2 - REC0004.2-ZONE-BASED-5TIER.json
Algorithm: zone_based
File: REC0004.2-ZONE-BASED-5TIER.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed zone performance around 1.0 hours_minutes

TEST DATA (7 days):
  Day 1:      0.9 hours_minutes
  Day 2:      1.1 hours_minutes
  Day 3:      0.7 hours_minutes
  Day 4:      1.0 hours_minutes
  Day 5:      1.2 hours_minutes
  Day 6:      0.6 hours_minutes
  Day 7:      1.0 hours_minutes

ALGORITHM DETAILS:
  Method: zone_based

SIGNIFICANCE: Tests zone_based algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 15: REC0004.3 - REC0004.3-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0004.3-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 units
  Day 2:      0.8 units
  Day 3:      0.7 units
  Day 4:      0.9 units
  Day 5:      0.7 units
  Day 6:      0.8 units
  Day 7:      0.9 units

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 16: REC0005.1 (i) - REC0005.1 (i)-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0005.1 (i)-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      1.0 drink
  Day 2:      1.0 drink
  Day 3:      0.0 drink
  Day 4:      1.0 drink
  Day 5:      1.0 drink
  Day 6:      1.0 drink
  Day 7:      1.0 drink

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 1.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 17: REC0005.1 (ii) - REC0005.1 (ii)-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0005.1 (ii)-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      2.0 drink
  Day 2:      2.0 drink
  Day 3:      0.0 drink
  Day 4:      2.0 drink
  Day 5:      2.0 drink
  Day 6:      2.0 drink
  Day 7:      2.0 drink

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 2.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 18: REC0005.2 - REC0005.2-CONSTRAINED-WEEKLY-ALLOWANCE.json
Algorithm: constrained_weekly_allowance
File: REC0005.2-CONSTRAINED-WEEKLY-ALLOWANCE.json
--------------------------------------------------------------------------------

SCENARIO:
  Weekly allowance test: 3 total vs 1.0 allowed

TEST DATA (7 days):
  Day 1:      0.0 drink
  Day 2:      1.0 drink
  Day 3:      0.0 drink
  Day 4:      1.0 drink
  Day 5:      1.0 drink
  Day 6:      0.0 drink
  Day 7:      0.0 drink

ALGORITHM DETAILS:
  Method: constrained_weekly_allowance

SIGNIFICANCE: Tests constrained_weekly_allowance algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 19: REC0005.3 - REC0005.3-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0005.3-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      0.0 drink
  Day 2:      0.0 drink
  Day 3:      0.0 drink
  Day 4:      0.0 drink
  Day 5:      0.0 drink
  Day 6:      0.0 drink
  Day 7:      0.0 drink

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 20: REC0006.1 - REC0006.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0006.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 serving target

TEST DATA (7 days):
  Day 1:      1.2 serving
  Day 2:      2.4 serving
  Day 3:      1.6 serving
  Day 4:      2.0 serving
  Day 5:      0.8 serving
  Day 6:      1.8 serving
  Day 7:      2.2 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 21: REC0006.2 - REC0006.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0006.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 3.0 serving target

TEST DATA (7 days):
  Day 1:      1.8 serving
  Day 2:      3.6 serving
  Day 3:      2.4 serving
  Day 4:      3.0 serving
  Day 5:      1.2 serving
  Day 6:      2.7 serving
  Day 7:      3.3 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 3.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 22: REC0006.3 - REC0006.3-PROPORTIONAL.json
Algorithm: proportional
File: REC0006.3-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 1.35 grams_per_kg target

TEST DATA (7 days):
  Day 1:      0.8 grams_per_kg
  Day 2:      1.6 grams_per_kg
  Day 3:      1.1 grams_per_kg
  Day 4:      1.4 grams_per_kg
  Day 5:      0.5 grams_per_kg
  Day 6:      1.2 grams_per_kg
  Day 7:      1.5 grams_per_kg

ALGORITHM DETAILS:
  Method: proportional
  Target: 1.35
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 23: REC0007.1 - REC0007.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0007.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 serving target

TEST DATA (7 days):
  Day 1:      1.2 serving
  Day 2:      2.4 serving
  Day 3:      1.6 serving
  Day 4:      2.0 serving
  Day 5:      0.8 serving
  Day 6:      1.8 serving
  Day 7:      2.2 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 24: REC0007.2 - REC0007.2-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0007.2-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 units
  Day 2:      0.8 units
  Day 3:      0.7 units
  Day 4:      0.9 units
  Day 5:      0.7 units
  Day 6:      0.8 units
  Day 7:      0.9 units

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 25: REC0007.3 - REC0007.3-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0007.3-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 units
  Day 2:      0.8 units
  Day 3:      0.7 units
  Day 4:      0.9 units
  Day 5:      0.7 units
  Day 6:      0.8 units
  Day 7:      0.9 units

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 26: REC0008.1 - REC0008.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0008.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 serving target

TEST DATA (7 days):
  Day 1:      1.2 serving
  Day 2:      2.4 serving
  Day 3:      1.6 serving
  Day 4:      2.0 serving
  Day 5:      0.8 serving
  Day 6:      1.8 serving
  Day 7:      2.2 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 27: REC0008.2 - REC0008.2-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0008.2-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 units
  Day 2:      0.8 units
  Day 3:      0.7 units
  Day 4:      0.9 units
  Day 5:      0.7 units
  Day 6:      0.8 units
  Day 7:      0.9 units

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 28: REC0008.3 - REC0008.3-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0008.3-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 units
  Day 2:      0.8 units
  Day 3:      0.7 units
  Day 4:      0.9 units
  Day 5:      0.7 units
  Day 6:      0.8 units
  Day 7:      0.9 units

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 29: REC0009.1 - REC0009.1-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0009.1-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      1.0 serving
  Day 2:      1.0 serving
  Day 3:      0.0 serving
  Day 4:      1.0 serving
  Day 5:      1.0 serving
  Day 6:      1.0 serving
  Day 7:      1.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 1.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 30: REC0009.2 - REC0009.2-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0009.2-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      2.0 serving
  Day 2:      2.0 serving
  Day 3:      0.0 serving
  Day 4:      2.0 serving
  Day 5:      2.0 serving
  Day 6:      2.0 serving
  Day 7:      2.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 2.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 31: REC0009.3 - REC0009.3-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0009.3-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      0.0 serving
  Day 2:      0.0 serving
  Day 3:      0.0 serving
  Day 4:      0.0 serving
  Day 5:      0.0 serving
  Day 6:      0.0 serving
  Day 7:      0.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 32: REC0010.1 - REC0010.1-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0010.1-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      3.0 serving
  Day 2:      3.0 serving
  Day 3:      0.0 serving
  Day 4:      3.0 serving
  Day 5:      3.0 serving
  Day 6:      3.0 serving
  Day 7:      3.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 3.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 33: REC0010.2 - REC0010.2-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0010.2-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      1.0 serving
  Day 2:      1.0 serving
  Day 3:      0.0 serving
  Day 4:      1.0 serving
  Day 5:      1.0 serving
  Day 6:      1.0 serving
  Day 7:      1.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 1.0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 34: REC0010.3 - REC0010.3-BINARY-THRESHOLD.json
Algorithm: binary_threshold
File: REC0010.3-BINARY-THRESHOLD.json
--------------------------------------------------------------------------------

SCENARIO:
  Daily requirement compliance (6/7 successful days)

TEST DATA (7 days):
  Day 1:      0.0 serving
  Day 2:      0.0 serving
  Day 3:      0.0 serving
  Day 4:      0.0 serving
  Day 5:      0.0 serving
  Day 6:      0.0 serving
  Day 7:      0.0 serving

ALGORITHM DETAILS:
  Method: binary_threshold
  Threshold: >= 0
  Weekly Score: Average of daily binary results

SIGNIFICANCE: Tests binary_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 35: REC0011.1 - REC0011.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0011.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 serving target

TEST DATA (7 days):
  Day 1:      1.2 serving
  Day 2:      2.4 serving
  Day 3:      1.6 serving
  Day 4:      2.0 serving
  Day 5:      0.8 serving
  Day 6:      1.8 serving
  Day 7:      2.2 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 36: REC0011.2 - REC0011.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0011.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 3.0 serving target

TEST DATA (7 days):
  Day 1:      1.8 serving
  Day 2:      3.6 serving
  Day 3:      2.4 serving
  Day 4:      3.0 serving
  Day 5:      1.2 serving
  Day 6:      2.7 serving
  Day 7:      3.3 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 3.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 37: REC0011.3 - REC0011.3-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0011.3-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 units
  Day 2:      0.8 units
  Day 3:      0.7 units
  Day 4:      0.9 units
  Day 5:      0.7 units
  Day 6:      0.8 units
  Day 7:      0.9 units

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 38: REC0012.1 - REC0012.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0012.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 serving target

TEST DATA (7 days):
  Day 1:      1.2 serving
  Day 2:      2.4 serving
  Day 3:      1.6 serving
  Day 4:      2.0 serving
  Day 5:      0.8 serving
  Day 6:      1.8 serving
  Day 7:      2.2 serving

ALGORITHM DETAILS:
  Method: proportional
  Target: 2
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 39: REC0012.2 - REC0012.2-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0012.2-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 composite_score
  Day 2:      0.8 composite_score
  Day 3:      0.7 composite_score
  Day 4:      0.9 composite_score
  Day 5:      0.7 composite_score
  Day 6:      0.8 composite_score
  Day 7:      0.9 composite_score

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 40: REC0012.3 - REC0012.3-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0012.3-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 composite_score
  Day 2:      0.8 composite_score
  Day 3:      0.7 composite_score
  Day 4:      0.9 composite_score
  Day 5:      0.7 composite_score
  Day 6:      0.8 composite_score
  Day 7:      0.9 composite_score

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 41: REC0013.1 - REC0013.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0013.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 2 days â‰¥400.0 mg (meets 2/7 requirement)

TEST DATA (7 days):
  Day 1:    348.6 mg
  Day 2:    311.5 mg
  Day 3:    493.0 mg
  Day 4:    456.4 mg
  Day 5:    193.3 mg
  Day 6:    125.9 mg
  Day 7:    331.1 mg

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 400.0
  Required Days: 2/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 42: REC0013.2 - REC0013.2-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0013.2-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 5 days â‰¥400.0 mg (meets 5/7 requirement)

TEST DATA (7 days):
  Day 1:    404.6 mg
  Day 2:    473.5 mg
  Day 3:    180.4 mg
  Day 4:    500.7 mg
  Day 5:    498.7 mg
  Day 6:    454.8 mg
  Day 7:    359.5 mg

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 400
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 43: REC0013.3 - REC0013.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0013.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Perfect elimination week - 0 mg all days

TEST DATA (7 days):
  Day 1:      0.0 mg
  Day 2:      0.0 mg
  Day 3:      0.0 mg
  Day 4:      0.0 mg
  Day 5:      0.0 mg
  Day 6:      0.0 mg
  Day 7:      0.0 mg

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 44: REC0014.1 - REC0014.1-CATEGORICAL-FILTER-DAILY.json
Algorithm: categorical_filter_threshold
File: REC0014.1-CATEGORICAL-FILTER-DAILY.json
--------------------------------------------------------------------------------

SCENARIO:
  Categorical food servings with filtering

TEST DATA (7 days):
  Day 1:      2.0 sources
  Day 2:      1.0 sources
  Day 3:      3.0 sources
  Day 4:      2.0 sources
  Day 5:      1.0 sources
  Day 6:      2.0 sources
  Day 7:      3.0 sources

ALGORITHM DETAILS:
  Method: categorical_filter_threshold

SIGNIFICANCE: Tests categorical_filter_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 45: REC0014.2 - REC0014.2-CATEGORICAL-FILTER-FREQUENCY.json
Algorithm: categorical_filter_threshold
File: REC0014.2-CATEGORICAL-FILTER-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Categorical food servings with filtering

TEST DATA (7 days):
  Day 1:      2.0 weekly_occurrences
  Day 2:      1.0 weekly_occurrences
  Day 3:      3.0 weekly_occurrences
  Day 4:      2.0 weekly_occurrences
  Day 5:      1.0 weekly_occurrences
  Day 6:      2.0 weekly_occurrences
  Day 7:      3.0 weekly_occurrences

ALGORITHM DETAILS:
  Method: categorical_filter_threshold

SIGNIFICANCE: Tests categorical_filter_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 46: REC0014.3 - REC0014.3-CATEGORICAL-FILTER-DAILY.json
Algorithm: categorical_filter_threshold
File: REC0014.3-CATEGORICAL-FILTER-DAILY.json
--------------------------------------------------------------------------------

SCENARIO:
  Categorical food servings with filtering

TEST DATA (7 days):
  Day 1:      2.0 sources
  Day 2:      1.0 sources
  Day 3:      3.0 sources
  Day 4:      2.0 sources
  Day 5:      1.0 sources
  Day 6:      2.0 sources
  Day 7:      3.0 sources

ALGORITHM DETAILS:
  Method: categorical_filter_threshold

SIGNIFICANCE: Tests categorical_filter_threshold algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 47: REC0015.1 - REC0015.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0015.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Caffeine cutoff: 2 days before 14:00, rest after

TEST DATA (7 days):
  Day 1:     14.9 time
  Day 2:     12.8 time
  Day 3:     15.8 time
  Day 4:     17.0 time
  Day 5:     12.9 time
  Day 6:     15.4 time
  Day 7:     15.6 time

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 14:00
  Required Days: 2/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 48: REC0015.2 - REC0015.2-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0015.2-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Caffeine cutoff: 5 days before 14:00, rest after

TEST DATA (7 days):
  Day 1:     12.9 time
  Day 2:     12.5 time
  Day 3:     14.5 time
  Day 4:     12.1 time
  Day 5:     13.4 time
  Day 6:     12.5 time
  Day 7:     17.6 time

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 14:00
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 49: REC0015.3 - REC0015.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0015.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Elimination violation on day 3 - fails entire week

TEST DATA (7 days):
  Day 1:      0.0 time
  Day 2:      0.0 time
  Day 3:      0.5 time
  Day 4:      0.0 time
  Day 5:      0.0 time
  Day 6:      0.0 time
  Day 7:      0.0 time

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 50: REC0016.1 - REC0016.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0016.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 meal target

TEST DATA (7 days):
  Day 1:      1.2 meal
  Day 2:      2.4 meal
  Day 3:      1.6 meal
  Day 4:      2.0 meal
  Day 5:      0.8 meal
  Day 6:      1.8 meal
  Day 7:      2.2 meal

ALGORITHM DETAILS:
  Method: proportional
  Target: 2
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 51: REC0016.2 - REC0016.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0016.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 3.0 meal target

TEST DATA (7 days):
  Day 1:      1.8 meal
  Day 2:      3.6 meal
  Day 3:      2.4 meal
  Day 4:      3.0 meal
  Day 5:      1.2 meal
  Day 6:      2.7 meal
  Day 7:      3.3 meal

ALGORITHM DETAILS:
  Method: proportional
  Target: 1.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 52: REC0016.3 - REC0016.3-COMPOSITE-WEIGHTED.json
Algorithm: composite_weighted
File: REC0016.3-COMPOSITE-WEIGHTED.json
--------------------------------------------------------------------------------

SCENARIO:
  Composite scoring with varied component performance

TEST DATA (7 days):
  Day 1:      0.8 composite_score
  Day 2:      0.8 composite_score
  Day 3:      0.7 composite_score
  Day 4:      0.9 composite_score
  Day 5:      0.7 composite_score
  Day 6:      0.8 composite_score
  Day 7:      0.9 composite_score

ALGORITHM DETAILS:
  Method: composite_weighted

SIGNIFICANCE: Tests composite_weighted algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 53: REC0017.1 - REC0017.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0017.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 2 days â‰¥10.0 hours (meets 2/7 requirement)

TEST DATA (7 days):
  Day 1:      4.5 hours
  Day 2:     10.3 hours
  Day 3:      6.9 hours
  Day 4:      8.9 hours
  Day 5:      6.2 hours
  Day 6:     11.6 hours
  Day 7:      8.5 hours

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 10
  Required Days: 2/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 54: REC0017.2 - REC0017.2-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0017.2-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 5 days â‰¥8.0 hours (meets 5/7 requirement)

TEST DATA (7 days):
  Day 1:      8.5 hours
  Day 2:      9.5 hours
  Day 3:      9.5 hours
  Day 4:      9.3 hours
  Day 5:      9.5 hours
  Day 6:      4.7 hours
  Day 7:      2.8 hours

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 8
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 55: REC0017.3 - REC0017.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0017.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Elimination violation on day 3 - fails entire week

TEST DATA (7 days):
  Day 1:      0.0 hours
  Day 2:      0.0 hours
  Day 3:      0.5 hours
  Day 4:      0.0 hours
  Day 5:      0.0 hours
  Day 6:      0.0 hours
  Day 7:      0.0 hours

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 56: REC0018.1 - REC0018.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0018.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 3 days â‰¥2.0 hours_minutes (meets 3/7 requirement)

TEST DATA (7 days):
  Day 1:      0.8 hours_minutes
  Day 2:      0.8 hours_minutes
  Day 3:      2.6 hours_minutes
  Day 4:      1.2 hours_minutes
  Day 5:      2.3 hours_minutes
  Day 6:      2.3 hours_minutes
  Day 7:      1.1 hours_minutes

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 2
  Required Days: 3/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 57: REC0018.2 - REC0018.2-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0018.2-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 5 days â‰¥2.0 hours_minutes (meets 5/7 requirement)

TEST DATA (7 days):
  Day 1:      2.6 hours_minutes
  Day 2:      3.0 hours_minutes
  Day 3:      2.8 hours_minutes
  Day 4:      2.2 hours_minutes
  Day 5:      3.0 hours_minutes
  Day 6:      1.2 hours_minutes
  Day 7:      0.6 hours_minutes

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 2
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 58: REC0018.3 - REC0018.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0018.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Perfect elimination week - 0 hours_minutes all days

TEST DATA (7 days):
  Day 1:      0.0 hours_minutes
  Day 2:      0.0 hours_minutes
  Day 3:      0.0 hours_minutes
  Day 4:      0.0 hours_minutes
  Day 5:      0.0 hours_minutes
  Day 6:      0.0 hours_minutes
  Day 7:      0.0 hours_minutes

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 59: REC0019.1 - REC0019.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0019.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 2 days â‰¥2.0 hours_minutes (meets 2/7 requirement)

TEST DATA (7 days):
  Day 1:      1.4 hours_minutes
  Day 2:      2.9 hours_minutes
  Day 3:      1.5 hours_minutes
  Day 4:      1.0 hours_minutes
  Day 5:      2.6 hours_minutes
  Day 6:      1.3 hours_minutes
  Day 7:      1.7 hours_minutes

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 2
  Required Days: 2/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 60: REC0019.2 - REC0019.2-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0019.2-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 5 days â‰¥3.0 hours_minutes (meets 5/7 requirement)

TEST DATA (7 days):
  Day 1:      1.0 hours_minutes
  Day 2:      2.6 hours_minutes
  Day 3:      4.2 hours_minutes
  Day 4:      3.9 hours_minutes
  Day 5:      3.8 hours_minutes
  Day 6:      3.6 hours_minutes
  Day 7:      3.2 hours_minutes

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 3
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 61: REC0019.3 - REC0019.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0019.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Elimination violation on day 3 - fails entire week

TEST DATA (7 days):
  Day 1:      0.0 hours_minutes
  Day 2:      0.0 hours_minutes
  Day 3:      0.5 hours_minutes
  Day 4:      0.0 hours_minutes
  Day 5:      0.0 hours_minutes
  Day 6:      0.0 hours_minutes
  Day 7:      0.0 hours_minutes

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 62: REC0020.1 - REC0020.1-PROPORTIONAL-FREQUENCY-HYBRID.json
Algorithm: proportional_frequency_hybrid
File: REC0020.1-PROPORTIONAL-FREQUENCY-HYBRID.json
--------------------------------------------------------------------------------

SCENARIO:
  Consistent 951 milliliter daily (67% of target) - tests partial credit fix

TEST DATA (7 days):
  Day 1:    951.4 milliliter
  Day 2:    951.4 milliliter
  Day 3:    951.4 milliliter
  Day 4:    951.4 milliliter
  Day 5:    951.4 milliliter
  Day 6:    951.4 milliliter
  Day 7:    951.4 milliliter

ALGORITHM DETAILS:
  Method: proportional_frequency_hybrid
  Daily Target: 1420.0
  Required Qualifying Days: 2
  Weekly Score: Average of top 2 daily scores

SIGNIFICANCE: Tests proportional_frequency_hybrid algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 63: REC0020.2 - REC0020.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0020.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 1893.0 units target

TEST DATA (7 days):
  Day 1:   1135.8 units
  Day 2:   2271.6 units
  Day 3:   1514.4 units
  Day 4:   1893.0 units
  Day 5:    757.2 units
  Day 6:   1703.7 units
  Day 7:   2082.3 units

ALGORITHM DETAILS:
  Method: proportional
  Target: 1.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 64: REC0020.3 - REC0020.3-PROPORTIONAL-DAILY.json
Algorithm: proportional
File: REC0020.3-PROPORTIONAL-DAILY.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2366.0 units target

TEST DATA (7 days):
  Day 1:   1419.6 units
  Day 2:   2839.2 units
  Day 3:   1892.8 units
  Day 4:   2366.0 units
  Day 5:    946.4 units
  Day 6:   2129.4 units
  Day 7:   2602.6 units

ALGORITHM DETAILS:
  Method: proportional
  Target: 1.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 65: REC0021.1 - REC0021.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0021.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 2 days â‰¥1.0 units (meets 2/7 requirement)

TEST DATA (7 days):
  Day 1:      0.4 units
  Day 2:      0.3 units
  Day 3:      1.0 units
  Day 4:      0.6 units
  Day 5:      0.8 units
  Day 6:      0.8 units
  Day 7:      1.2 units

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 1
  Required Days: 2/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 66: REC0021.2 - REC0021.2-PROPORTIONAL-FREQUENCY-HYBRID.json
Algorithm: proportional_frequency_hybrid
File: REC0021.2-PROPORTIONAL-FREQUENCY-HYBRID.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance with rest day, 5 best days counted

TEST DATA (7 days):
  Day 1:      1.6 meal
  Day 2:      0.0 meal
  Day 3:      2.0 meal
  Day 4:      1.7 meal
  Day 5:      1.6 meal
  Day 6:      1.1 meal
  Day 7:      2.0 meal

ALGORITHM DETAILS:
  Method: proportional_frequency_hybrid
  Daily Target: 2.0
  Required Qualifying Days: 5
  Weekly Score: Average of top 5 daily scores

SIGNIFICANCE: Tests proportional_frequency_hybrid algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 67: REC0021.3 - REC0021.3-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0021.3-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 5 days â‰¥3.0 units (meets 5/7 requirement)

TEST DATA (7 days):
  Day 1:      3.4 units
  Day 2:      4.3 units
  Day 3:      1.1 units
  Day 4:      4.4 units
  Day 5:      3.1 units
  Day 6:      2.6 units
  Day 7:      3.6 units

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 3
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 68: REC0022.1 - REC0022.1-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0022.1-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 2 days â‰¥1.0 units (meets 2/7 requirement)

TEST DATA (7 days):
  Day 1:      0.5 units
  Day 2:      0.7 units
  Day 3:      1.4 units
  Day 4:      0.8 units
  Day 5:      1.5 units
  Day 6:      0.7 units
  Day 7:      0.4 units

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 1
  Required Days: 2/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 69: REC0022.2 - REC0022.2-MINIMUM-FREQUENCY.json
Algorithm: minimum_frequency
File: REC0022.2-MINIMUM-FREQUENCY.json
--------------------------------------------------------------------------------

SCENARIO:
  Exactly 5 days â‰¥1.0 units (meets 5/7 requirement)

TEST DATA (7 days):
  Day 1:      0.3 units
  Day 2:      1.4 units
  Day 3:      0.9 units
  Day 4:      1.0 units
  Day 5:      1.5 units
  Day 6:      1.0 units
  Day 7:      1.3 units

ALGORITHM DETAILS:
  Method: minimum_frequency
  Daily Threshold: â‰¥ 1
  Required Days: 5/7
  Weekly Score: 100% if requirement met, 0% otherwise

SIGNIFICANCE: Tests minimum_frequency algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 70: REC0022.3 - REC0022.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0022.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Elimination violation on day 3 - fails entire week

TEST DATA (7 days):
  Day 1:      0.0 units
  Day 2:      0.0 units
  Day 3:      0.5 units
  Day 4:      0.0 units
  Day 5:      0.0 units
  Day 6:      0.0 units
  Day 7:      0.0 units

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 71: REC0023.1 - REC0023.1-CONSTRAINED-WEEKLY-ALLOWANCE.json
Algorithm: constrained_weekly_allowance
File: REC0023.1-CONSTRAINED-WEEKLY-ALLOWANCE.json
--------------------------------------------------------------------------------

SCENARIO:
  Weekly allowance test: 3 total vs 1.0 allowed

TEST DATA (7 days):
  Day 1:      0.0 units
  Day 2:      1.0 units
  Day 3:      0.0 units
  Day 4:      1.0 units
  Day 5:      1.0 units
  Day 6:      0.0 units
  Day 7:      0.0 units

ALGORITHM DETAILS:
  Method: constrained_weekly_allowance

SIGNIFICANCE: Tests constrained_weekly_allowance algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 72: REC0023.2 - REC0023.2-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0023.2-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Perfect elimination week - 0 units all days

TEST DATA (7 days):
  Day 1:      0.0 units
  Day 2:      0.0 units
  Day 3:      0.0 units
  Day 4:      0.0 units
  Day 5:      0.0 units
  Day 6:      0.0 units
  Day 7:      0.0 units

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 73: REC0023.3 - REC0023.3-WEEKLY-ELIMINATION.json
Algorithm: weekly_elimination
File: REC0023.3-WEEKLY-ELIMINATION.json
--------------------------------------------------------------------------------

SCENARIO:
  Elimination violation on day 3 - fails entire week

TEST DATA (7 days):
  Day 1:      0.0 units
  Day 2:      0.0 units
  Day 3:      0.5 units
  Day 4:      0.0 units
  Day 5:      0.0 units
  Day 6:      0.0 units
  Day 7:      0.0 units

ALGORITHM DETAILS:
  Method: weekly_elimination

SIGNIFICANCE: Tests weekly_elimination algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 74: REC0024.1 - REC0024.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0024.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 days target

TEST DATA (7 days):
  Day 1:      1.2 days
  Day 2:      2.4 days
  Day 3:      1.6 days
  Day 4:      2.0 days
  Day 5:      0.8 days
  Day 6:      1.8 days
  Day 7:      2.2 days

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 75: REC0024.2 - REC0024.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0024.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 5.0 days target

TEST DATA (7 days):
  Day 1:      3.0 days
  Day 2:      6.0 days
  Day 3:      4.0 days
  Day 4:      5.0 days
  Day 5:      2.0 days
  Day 6:      4.5 days
  Day 7:      5.5 days

ALGORITHM DETAILS:
  Method: proportional
  Target: 5.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 76: REC0024.3 - REC0024.3-PROPORTIONAL.json
Algorithm: proportional
File: REC0024.3-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 meal target

TEST DATA (7 days):
  Day 1:      1.2 meal
  Day 2:      2.4 meal
  Day 3:      1.6 meal
  Day 4:      2.0 meal
  Day 5:      0.8 meal
  Day 6:      1.8 meal
  Day 7:      2.2 meal

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 77: REC0025.1 - REC0025.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0025.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 session target

TEST DATA (7 days):
  Day 1:      1.2 session
  Day 2:      2.4 session
  Day 3:      1.6 session
  Day 4:      2.0 session
  Day 5:      0.8 session
  Day 6:      1.8 session
  Day 7:      2.2 session

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 78: REC0025.2 - REC0025.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0025.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 3.0 session target

TEST DATA (7 days):
  Day 1:      1.8 session
  Day 2:      3.6 session
  Day 3:      2.4 session
  Day 4:      3.0 session
  Day 5:      1.2 session
  Day 6:      2.7 session
  Day 7:      3.3 session

ALGORITHM DETAILS:
  Method: proportional
  Target: 3.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 79: REC0025.3 - REC0025.3-PROPORTIONAL.json
Algorithm: proportional
File: REC0025.3-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 5.0 session target

TEST DATA (7 days):
  Day 1:      3.0 session
  Day 2:      6.0 session
  Day 3:      4.0 session
  Day 4:      5.0 session
  Day 5:      2.0 session
  Day 6:      4.5 session
  Day 7:      5.5 session

ALGORITHM DETAILS:
  Method: proportional
  Target: 5.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 80: REC0026.1 - REC0026.1-PROPORTIONAL-FREQUENCY-HYBRID.json
Algorithm: proportional_frequency_hybrid
File: REC0026.1-PROPORTIONAL-FREQUENCY-HYBRID.json
--------------------------------------------------------------------------------

SCENARIO:
  Consistent 3350 step daily (67% of target) - tests partial credit fix

TEST DATA (7 days):
  Day 1:   3350.0 step
  Day 2:   3350.0 step
  Day 3:   3350.0 step
  Day 4:   3350.0 step
  Day 5:   3350.0 step
  Day 6:   3350.0 step
  Day 7:   3350.0 step

ALGORITHM DETAILS:
  Method: proportional_frequency_hybrid
  Daily Target: 5000.0
  Required Qualifying Days: 2
  Weekly Score: Average of top 2 daily scores

SIGNIFICANCE: Tests proportional_frequency_hybrid algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 81: REC0026.2 - REC0026.2-PROPORTIONAL-FREQUENCY-HYBRID.json
Algorithm: proportional_frequency_hybrid
File: REC0026.2-PROPORTIONAL-FREQUENCY-HYBRID.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance with rest day, 5 best days counted

TEST DATA (7 days):
  Day 1:   6000.0 step
  Day 2:      0.0 step
  Day 3:   7500.0 step
  Day 4:   6525.0 step
  Day 5:   6000.0 step
  Day 6:   3975.0 step
  Day 7:   7500.0 step

ALGORITHM DETAILS:
  Method: proportional_frequency_hybrid
  Daily Target: 7500.0
  Required Qualifying Days: 5
  Weekly Score: Average of top 5 daily scores

SIGNIFICANCE: Tests proportional_frequency_hybrid algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 82: REC0026.3 - REC0026.3-PROPORTIONAL.json
Algorithm: proportional
File: REC0026.3-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 10000.0 step target

TEST DATA (7 days):
  Day 1:   6000.0 step
  Day 2:  12000.0 step
  Day 3:   8000.0 step
  Day 4:  10000.0 step
  Day 5:   4000.0 step
  Day 6:   9000.0 step
  Day 7:  11000.0 step

ALGORITHM DETAILS:
  Method: proportional
  Target: 10000.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 83: REC0027.1 - REC0027.1-PROPORTIONAL.json
Algorithm: proportional
File: REC0027.1-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 1.0 session target

TEST DATA (7 days):
  Day 1:      0.6 session
  Day 2:      1.2 session
  Day 3:      0.8 session
  Day 4:      1.0 session
  Day 5:      0.4 session
  Day 6:      0.9 session
  Day 7:      1.1 session

ALGORITHM DETAILS:
  Method: proportional
  Target: 1.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 84: REC0027.2 - REC0027.2-PROPORTIONAL.json
Algorithm: proportional
File: REC0027.2-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 2.0 session target

TEST DATA (7 days):
  Day 1:      1.2 session
  Day 2:      2.4 session
  Day 3:      1.6 session
  Day 4:      2.0 session
  Day 5:      0.8 session
  Day 6:      1.8 session
  Day 7:      2.2 session

ALGORITHM DETAILS:
  Method: proportional
  Target: 2.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

ðŸ“Š TEST 85: REC0027.3 - REC0027.3-PROPORTIONAL.json
Algorithm: proportional
File: REC0027.3-PROPORTIONAL.json
--------------------------------------------------------------------------------

SCENARIO:
  Mixed performance around 3.0 session target

TEST DATA (7 days):
  Day 1:      1.8 session
  Day 2:      3.6 session
  Day 3:      2.4 session
  Day 4:      3.0 session
  Day 5:      1.2 session
  Day 6:      2.7 session
  Day 7:      3.3 session

ALGORITHM DETAILS:
  Method: proportional
  Target: 3.0
  Weekly Score: Average of all daily proportional scores

SIGNIFICANCE: Tests proportional algorithm behavior with realistic data

================================================================================

VERIFICATION SUMMARY
================================================================================
âœ… Generated test scenarios for 85 configurations
ðŸ“ˆ Algorithm distribution: 9 different types
ðŸ”„ Auto-discovery: Test data updates when new configs added
ðŸ§ª Realistic scenarios: Mixed success/partial/failure patterns

NEXT STEPS:
1. Run actual algorithm calculations on this test data
2. Add expected score calculations for each algorithm type
3. Implement automated scoring verification
4. Set up CI/CD to run this test when configs change

END OF COMPREHENSIVE VERIFICATION
====================================================================================================